openapi: 3.0.0
info:
  title: Project Service API
  description: API for project management, applications, invitations, file management, updates, reviews, and boosting
  version: 1.0.0

servers:
  - url: http://localhost:3002
    description: Local Project Server

tags:
  - name: "游릭 PROJECT SERVICE - Management"
    description: "Project Service: Core project CRUD operations and management"
  - name: "游릭 PROJECT SERVICE - Applications"
    description: "Project Service: Project application and applicant management"
  - name: "游릭 PROJECT SERVICE - Invitations"
    description: "Project Service: Project invitation system"
  - name: "游릭 PROJECT SERVICE - Files"
    description: "Project Service: File management for projects"
  - name: "游릭 PROJECT SERVICE - Updates"
    description: "Project Service: Project progress updates and milestones"
  - name: "游릭 PROJECT SERVICE - Reviews"
    description: "Project Service: Project reviews and ratings"
  - name: "游릭 PROJECT SERVICE - Boosting"
    description: "Project Service: Project promotion and boosting features"
  - name: "游릭 PROJECT SERVICE - Analytics"
    description: "Project Service: Project analytics, statistics, and data insights"
  - name: "游릭 PROJECT SERVICE - Search"
    description: "Project Service: Advanced project search and discovery"
  - name: "游릭 PROJECT SERVICE - Favorites"
    description: "Project Service: Project favorites and bookmarks"
  - name: "游릭 PROJECT SERVICE - Comments"
    description: "Project Service: Project comments and discussions"
  - name: "游릭 PROJECT SERVICE - Public Discovery"
    description: "Project Service: Public project discovery and metadata for developers"
  - name: "游릭 PROJECT SERVICE - AI"
    description: "Project Service: AI-powered project generation and suggestions"

paths:
  /api/v1/projects:
    post:
      summary: Create a new project
      description: Create a new project with all necessary details
      tags:
        - "游릭 PROJECT SERVICE - Management"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
            example:
              title: "E-commerce Platform Development"
              description: "Build a modern e-commerce platform with React and Node.js. Looking for a full-stack developer with experience in React, Node.js, and MongoDB."
              roleNeeded: "Full Stack Developer"
              status: "active"
              priority: "high"
              category: "Web Development"
              experienceLevel: "mid"
              budgetMin: 8000
              budgetMax: 15000
              currency: "USD"
              isRemote: true
              location: "Remote"
              duration: "3 months"
              startDate: "2024-02-01T00:00:00Z"
              deadline: "2024-05-01T00:00:00Z"
              requirements: "3+ years React experience, Node.js knowledge, MongoDB experience preferred"
              benefits: "Flexible hours, learning opportunities, competitive pay"
              company: "TechCorp Inc."
              website: "https://techcorp.com"
              maxApplicants: 10
              language: "English"
              timezone: "UTC-5"
              skills: ["React", "Node.js", "MongoDB", "Express", "JavaScript"]
              tags: ["ecommerce", "react", "nodejs", "mongodb"]
      responses:
        "201":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "400":
          description: Bad request - missing required fields
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    get:
      summary: List projects
      description: Get a list of projects with optional filtering. Enhanced with public filters for developer discovery.
      tags:
        - "游릭 PROJECT SERVICE - Management"
      parameters:
        - name: ownerId
          in: query
          description: Filter by project owner ID
          schema:
            type: integer
        - name: status
          in: query
          description: Filter by project status
          schema:
            type: string
            enum: [draft, active, completed, cancelled]
        - name: category
          in: query
          description: Filter by project category
          required: false
          schema:
            type: string
            example: "Web Development"
        - name: experienceLevel
          in: query
          description: Filter by required experience level
          required: false
          schema:
            type: string
            enum: [entry, mid, senior, lead]
            example: "mid"
        - name: isRemote
          in: query
          description: Filter by remote work availability
          required: false
          schema:
            type: boolean
            example: true
        - name: limit
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        "200":
          description: Projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "500":
          description: Internal server error

  /api/v1/projects/public:
    get:
      summary: Get public projects for developer discovery
      description: Get a list of projects specifically designed for developer discovery with advanced filtering options. No authentication required.
      tags:
        - "游릭 PROJECT SERVICE - Public Discovery"
      parameters:
        - name: category
          in: query
          description: Filter by project category
          required: false
          schema:
            type: string
            example: "Web Development"
        - name: experienceLevel
          in: query
          description: Filter by required experience level
          required: false
          schema:
            type: string
            enum: [entry, mid, senior, lead]
            example: "mid"
        - name: isRemote
          in: query
          description: Filter by remote work availability
          required: false
          schema:
            type: boolean
            example: true
        - name: location
          in: query
          description: Filter by location
          required: false
          schema:
            type: string
            example: "New York"
        - name: budgetMin
          in: query
          description: Minimum budget filter
          required: false
          schema:
            type: integer
            example: 1000
        - name: budgetMax
          in: query
          description: Maximum budget filter
          required: false
          schema:
            type: integer
            example: 5000
        - name: status
          in: query
          description: Filter by project status
          required: false
          schema:
            type: string
            enum: [draft, upcoming, active, paused, completed, cancelled]
            default: active
        - name: sortBy
          in: query
          description: Sort by field
          required: false
          schema:
            type: string
            enum: [createdAt, updatedAt, title, budgetMin, budgetMax, ratingAvg]
            default: createdAt
        - name: sortOrder
          in: query
          description: Sort order
          required: false
          schema:
            type: string
            enum: [asc, desc]
            default: desc
        - name: limit
          in: query
          description: Number of results per page
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: page
          in: query
          description: Page number
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
      responses:
        '200':
          description: Successfully retrieved public projects
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  projects:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 20
                      total:
                        type: integer
                        example: 150
                      pages:
                        type: integer
                        example: 8
                  filters:
                    type: object
                    properties:
                      category:
                        type: string
                        example: "Web Development"
                      experienceLevel:
                        type: string
                        example: "mid"
                      isRemote:
                        type: boolean
                        example: true
                      location:
                        type: string
                        example: "New York"
                      budgetMin:
                        type: integer
                        example: 1000
                      budgetMax:
                        type: integer
                        example: 5000
                      status:
                        type: string
                        example: "active"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/projects/categories:
    get:
      summary: Get available project categories
      description: Get a list of all available project categories for filtering and form building. No authentication required.
      tags:
        - "游릭 PROJECT SERVICE - Public Discovery"
      responses:
        '200':
          description: Successfully retrieved categories
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  categories:
                    type: array
                    items:
                      type: string
                    example: 
                      - "Web Development"
                      - "Mobile Development"
                      - "Desktop Application"
                      - "Backend Development"
                      - "Frontend Development"
                      - "Full Stack Development"
                      - "DevOps"
                      - "Data Science"
                      - "Machine Learning"
                      - "AI Development"
                      - "Blockchain"
                      - "Game Development"
                      - "UI/UX Design"
                      - "Graphic Design"
                      - "Content Writing"
                      - "Digital Marketing"
                      - "SEO"
                      - "Video Editing"
                      - "Audio Production"
                      - "Translation"
                      - "Research"
                      - "Consulting"
                      - "Other"
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

  /api/v1/projects/{id}:
    get:
      summary: Get a specific project
      description: Retrieve a project by its ID
      tags:
        - "游릭 PROJECT SERVICE - Management"
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "400":
          description: Bad request - invalid project ID
        "404":
          description: Project not found
        "500":
          description: Internal server error

    put:
      summary: Update a project
      description: Update project details
      tags:
        - "游릭 PROJECT SERVICE - Management"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
            example:
              title: "Updated E-commerce Platform Development"
              description: "Build a modern e-commerce platform with React and Node.js. Updated requirements include payment integration and mobile responsiveness."
              roleNeeded: "Full Stack Developer"
              status: "active"
              priority: "high"
              category: "Web Development"
              experienceLevel: "senior"
              budgetMin: 10000
              budgetMax: 18000
              currency: "USD"
              isRemote: true
              location: "Remote"
              duration: "4 months"
              startDate: "2024-02-15T00:00:00Z"
              deadline: "2024-06-15T00:00:00Z"
              requirements: "5+ years React experience, Node.js knowledge, MongoDB experience, payment gateway integration"
              benefits: "Flexible hours, learning opportunities, competitive pay, bonus for early completion"
              company: "TechCorp Inc."
              website: "https://techcorp.com"
              maxApplicants: 15
              language: "English"
              timezone: "UTC-5"
              skills: ["React", "Node.js", "MongoDB", "Express", "JavaScript", "Stripe", "PayPal"]
              tags: ["ecommerce", "react", "nodejs", "mongodb", "payments"]
      responses:
        "200":
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Project not found
        "500":
          description: Internal server error

    delete:
      summary: Delete a project
      description: Soft delete a project
      tags:
        - "游릭 PROJECT SERVICE - Management"
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Project deleted"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/v1/projects/apply:
    post:
      summary: Apply to a project
      description: Submit an application to a project
      tags:
        - "游릭 PROJECT SERVICE - Applications"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicationRequest"
            example:
              projectId: 123
              matchScore: 87.5
              notes: "I have 5+ years of experience with React and Node.js. I've built similar e-commerce platforms before and have experience with payment integration. I'm available to start immediately and can commit to the full project duration."
      responses:
        "201":
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/applicants/status:
    put:
      summary: Update applicant status
      description: Update the status of a project applicant
      tags:
        - "游릭 PROJECT SERVICE - Applications"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApplicantStatusUpdate"
            example:
              projectId: 123
              userId: 456
              status: "accepted"
      responses:
        "200":
          description: Applicant status updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApplicationResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/{projectId}/applicants:
    get:
      summary: List project applicants
      description: Get all applicants for a specific project
      tags:
        - "游릭 PROJECT SERVICE - Applications"
      security:
        - bearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Applicants retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  applicants:
                    type: array
                    items:
                      $ref: "#/components/schemas/Applicant"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/invite:
    post:
      summary: Create project invitation
      description: Send an invitation to join a project (only project owners can send invites)
      tags:
        - "游릭 PROJECT SERVICE - Invitations"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteRequest"
            example:
              projectId: 123
              invitedEmail: "developer@example.com"
              invitedUserId: 456
              role: "Frontend Developer"
              message: "Hi! We'd love to have you join our e-commerce platform project. Your React skills would be perfect for this role. Please let us know if you're interested!"
      responses:
        "201":
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResponse"
        "400":
          description: Bad request - missing fields or duplicate invite
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - you can only invite people to your own projects
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/v1/projects/invites/my:
    get:
      summary: Get my invitations
      description: Get all invitations sent to the authenticated user
      tags:
        - "游릭 PROJECT SERVICE - Invitations"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Invitations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  invites:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invite"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/invite/respond:
    put:
      summary: Respond to invitation
      description: Accept or decline a project invitation (only the invited person can respond)
      tags:
        - "游릭 PROJECT SERVICE - Invitations"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InviteResponseRequest"
            example:
              inviteId: 1
              status: "accepted"
      responses:
        "200":
          description: Invitation response recorded
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InviteResponse"
        "400":
          description: Bad request - invite not found, already responded, or invalid status
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - you can only respond to invites sent to you
        "404":
          description: Invite not found
        "500":
          description: Internal server error

  /api/v1/projects/files:
    post:
      summary: Add file to project
      description: Upload and attach a file to a project
      tags:
        - "游릭 PROJECT SERVICE - Files"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - projectId
                - file
              properties:
                projectId:
                  type: integer
                  description: ID of the project to attach the file to
                  example: 123
                file:
                  type: string
                  format: binary
                  description: File to upload (any format)
                description:
                  type: string
                  description: Optional description of the file
                  example: "Project requirements document with detailed specifications"
                category:
                  type: string
                  description: File category
                  example: "requirements"
                  enum: ["requirements", "design", "documentation", "code", "other"]
            example:
              projectId: 123
              file: "[Binary file data]"
              description: "Project requirements document with detailed specifications"
              category: "requirements"
      responses:
        "201":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/{projectId}/files:
    get:
      summary: Get project files
      description: Retrieve all files uploaded for a specific project with Supabase URLs
      tags:
        - "游릭 PROJECT SERVICE - Files"
      parameters:
        - name: projectId
          in: path
          required: true
          description: ID of the project
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Files retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  files:
                    type: array
                    items:
                      $ref: "#/components/schemas/File"
        "400":
          description: Bad request
        "500":
          description: Internal server error

  /api/v1/projects/updates:
    post:
      summary: Add project update
      description: Add an update or progress note to a project
      tags:
        - "游릭 PROJECT SERVICE - Updates"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateRequest"
            example:
              projectId: 123
              type: "progress"
              message: "Completed the user authentication module with JWT integration. All login and registration endpoints are working correctly. Next milestone is payment integration."
      responses:
        "201":
          description: Update added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/reviews:
    post:
      summary: Add project review
      description: Submit a review for a project
      tags:
        - "游릭 PROJECT SERVICE - Reviews"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReviewRequest"
            example:
              projectId: 123
              rating: 5
              comment: "Excellent project! The team delivered high-quality work on time. Great communication throughout the project. The e-commerce platform exceeded our expectations. Highly recommend working with this team."
      responses:
        "201":
          description: Review added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReviewResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/boost:
    post:
      summary: Add project boost
      description: Purchase a boost to promote a project
      tags:
        - "游릭 PROJECT SERVICE - Boosting"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BoostRequest"
            example:
              projectId: 123
              plan: "premium"
              amountCents: 5000
              currency: "USD"
              startAt: "2024-01-15T00:00:00Z"
              endAt: "2024-02-15T00:00:00Z"
      responses:
        "201":
          description: Boost added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BoostResponse"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  # 游늵 Project Analytics & Data (Public endpoints for viewing)
  /api/v1/projects/{projectId}/updates:
    get:
      summary: Get project updates
      description: Retrieve all updates and progress notes for a specific project
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project updates retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  updates:
                    type: array
                    items:
                      $ref: "#/components/schemas/Update"
              example:
                success: true
                status: 200
                updates:
                  - id: 1
                    projectId: 123
                    authorId: 456
                    type: "progress"
                    message: "Completed user authentication module with JWT integration"
                    createdAt: "2024-01-15T10:30:00Z"
                  - id: 2
                    projectId: 123
                    authorId: 456
                    type: "milestone"
                    message: "Reached 50% completion milestone"
                    createdAt: "2024-01-14T15:45:00Z"
                  - id: 3
                    projectId: 123
                    authorId: 789
                    type: "announcement"
                    message: "Project deadline extended by 1 week"
                    createdAt: "2024-01-13T09:20:00Z"
        "400":
          description: Bad request
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/v1/projects/{projectId}/reviews:
    get:
      summary: Get project reviews
      description: Retrieve all reviews and ratings for a specific project
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project reviews retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  reviews:
                    type: array
                    items:
                      $ref: "#/components/schemas/Review"
              example:
                success: true
                status: 200
                reviews:
                  - id: 1
                    projectId: 123
                    reviewerId: 789
                    rating: 5
                    comment: "Excellent project! Great communication and delivered on time. Highly recommend working with this team."
                    createdAt: "2024-01-15T14:20:00Z"
                  - id: 2
                    projectId: 123
                    reviewerId: 101
                    rating: 4
                    comment: "Very professional and skilled team. Project was completed with high quality standards."
                    createdAt: "2024-01-14T16:30:00Z"
                  - id: 3
                    projectId: 123
                    reviewerId: 202
                    rating: 5
                    comment: "Outstanding work! Exceeded expectations and provided great value."
                    createdAt: "2024-01-13T11:15:00Z"
        "400":
          description: Bad request
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/v1/projects/{projectId}/boosts:
    get:
      summary: Get project boosts
      description: Retrieve all boost purchases and promotions for a specific project
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project boosts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  boosts:
                    type: array
                    items:
                      $ref: "#/components/schemas/Boost"
              example:
                success: true
                status: 200
                boosts:
                  - id: 1
                    projectId: 123
                    purchasedBy: 456
                    plan: "premium"
                    amountCents: 5000
                    currency: "USD"
                    startAt: "2024-01-15T00:00:00Z"
                    endAt: "2024-02-15T00:00:00Z"
                    createdAt: "2024-01-15T08:30:00Z"
                  - id: 2
                    projectId: 123
                    purchasedBy: 456
                    plan: "featured"
                    amountCents: 10000
                    currency: "USD"
                    startAt: "2024-01-10T00:00:00Z"
                    endAt: "2024-01-25T00:00:00Z"
                    createdAt: "2024-01-10T12:15:00Z"
        "400":
          description: Bad request
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/v1/projects/{projectId}/stats:
    get:
      summary: Get project statistics
      description: Retrieve comprehensive statistics and analytics for a specific project
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectStats"
              example:
                success: true
                status: 200
                stats:
                  projectId: 123
                  totalViews: 1250
                  totalApplications: 45
                  totalFavorites: 23
                  averageRating: 4.7
                  totalReviews: 18
                  totalUpdates: 12
                  totalBoosts: 3
                  totalComments: 67
                  completionRate: 85.5
                  responseTime: "2.3 hours"
                  lastActivity: "2024-01-15T16:45:00Z"
        "400":
          description: Bad request
        "404":
          description: Project not found
        "500":
          description: Internal server error

  # 游댌 Advanced Search & Discovery
  /api/v1/projects/search:
    get:
      summary: Search projects with advanced filters
      description: Search and filter projects with multiple criteria including skills, location, budget, etc.
      tags:
        - "游릭 PROJECT SERVICE - Search"
      parameters:
        - name: query
          in: query
          description: Search query string
          schema:
            type: string
          example: "React developer"
        - name: skills
          in: query
          description: Comma-separated list of required skills
          schema:
            type: string
          example: "React,Node.js,TypeScript"
        - name: location
          in: query
          description: Project location filter
          schema:
            type: string
          example: "Remote"
        - name: budgetMin
          in: query
          description: Minimum budget filter
          schema:
            type: integer
          example: 5000
        - name: budgetMax
          in: query
          description: Maximum budget filter
          schema:
            type: integer
          example: 15000
        - name: status
          in: query
          description: Project status filter
          schema:
            type: string
            enum: [draft, active, completed, cancelled]
          example: "active"
        - name: experienceLevel
          in: query
          description: Required experience level
          schema:
            type: string
            enum: [entry, mid, senior, expert]
          example: "mid"
        - name: isRemote
          in: query
          description: Remote work filter
          schema:
            type: boolean
          example: true
        - name: sortBy
          in: query
          description: Sort results by field
          schema:
            type: string
            enum: [createdAt, budget, deadline, rating, applicants]
          example: "createdAt"
        - name: sortOrder
          in: query
          description: Sort order
          schema:
            type: string
            enum: [asc, desc]
          example: "desc"
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            default: 1
          example: 1
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        "200":
          description: Search results retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  results:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      total:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 3
              example:
                success: true
                status: 200
                results:
                  - id: 1
                    title: "E-commerce Platform Development"
                    description: "Build a modern e-commerce platform with React and Node.js"
                    roleNeeded: "Full Stack Developer"
                    status: "active"
                    priority: "high"
                    budgetMin: 5000
                    budgetMax: 15000
                    currency: "USD"
                    isRemote: true
                    location: "Remote"
                    experienceLevel: "mid"
                    category: "Web Development"
                    skills: ["React", "Node.js", "MongoDB"]
                    tags: ["ecommerce", "react", "nodejs"]
                    applicantsCount: 12
                    ratingAvg: 4.5
                    createdAt: "2024-01-10T00:00:00Z"
                  - id: 2
                    title: "Mobile App Development"
                    description: "Create a cross-platform mobile app using React Native"
                    roleNeeded: "Mobile Developer"
                    status: "active"
                    priority: "medium"
                    budgetMin: 8000
                    budgetMax: 20000
                    currency: "USD"
                    isRemote: true
                    location: "Remote"
                    experienceLevel: "senior"
                    category: "Mobile Development"
                    skills: ["React Native", "JavaScript", "Firebase"]
                    tags: ["mobile", "react-native", "firebase"]
                    applicantsCount: 8
                    ratingAvg: 4.8
                    createdAt: "2024-01-12T00:00:00Z"
                pagination:
                  page: 1
                  limit: 10
                  total: 25
                  totalPages: 3
        "400":
          description: Bad request
        "500":
          description: Internal server error

  /api/v1/projects/recommendations:
    get:
      summary: Get project recommendations for user
      description: Get personalized project recommendations based on user skills and preferences
      tags:
        - "游릭 PROJECT SERVICE - Search"
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: Maximum number of recommendations
          schema:
            type: integer
            default: 10
          example: 10
      responses:
        "200":
          description: Recommendations retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  recommendations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
              example:
                success: true
                status: 200
                recommendations:
                  - id: 15
                    title: "AI-Powered Chatbot Development"
                    description: "Develop an intelligent chatbot using machine learning and natural language processing"
                    roleNeeded: "AI/ML Developer"
                    status: "active"
                    priority: "high"
                    budgetMin: 12000
                    budgetMax: 25000
                    currency: "USD"
                    isRemote: true
                    location: "Remote"
                    experienceLevel: "senior"
                    category: "Artificial Intelligence"
                    skills: ["Python", "TensorFlow", "NLP", "Machine Learning"]
                    tags: ["ai", "chatbot", "python", "ml"]
                    applicantsCount: 5
                    ratingAvg: 4.9
                    matchScore: 95
                    createdAt: "2024-01-14T00:00:00Z"
                  - id: 22
                    title: "Blockchain Smart Contract Development"
                    description: "Create smart contracts for DeFi application using Solidity"
                    roleNeeded: "Blockchain Developer"
                    status: "active"
                    priority: "high"
                    budgetMin: 15000
                    budgetMax: 30000
                    currency: "USD"
                    isRemote: true
                    location: "Remote"
                    experienceLevel: "senior"
                    category: "Blockchain"
                    skills: ["Solidity", "Ethereum", "Web3", "DeFi"]
                    tags: ["blockchain", "smart-contracts", "defi", "ethereum"]
                    applicantsCount: 3
                    ratingAvg: 4.7
                    matchScore: 88
                    createdAt: "2024-01-13T00:00:00Z"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  # 仇벒잺 Project Favorites (User-specific)
  /api/v1/projects/favorites:
    post:
      summary: Add project to favorites
      description: Add a project to user's favorites list
      tags:
        - "游릭 PROJECT SERVICE - Favorites"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteRequest"
            example:
              projectId: 123
      responses:
        "201":
          description: Project added to favorites successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteResponse"
              example:
                success: true
                status: 201
                message: "Project added to favorites"
                favorite:
                  id: 15
                  userId: 456
                  projectId: 123
                  createdAt: "2024-01-15T16:30:00Z"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    delete:
      summary: Remove project from favorites
      description: Remove a project from user's favorites list
      tags:
        - "游릭 PROJECT SERVICE - Favorites"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteRequest"
            example:
              projectId: 123
      responses:
        "200":
          description: Project removed from favorites successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FavoriteResponse"
              example:
                success: true
                status: 200
                message: "Project removed from favorites"
                favorite:
                  id: 15
                  userId: 456
                  projectId: 123
                  createdAt: "2024-01-15T16:30:00Z"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/favorites/my:
    get:
      summary: Get user's favorite projects
      description: Retrieve all projects favorited by the authenticated user
      tags:
        - "游릭 PROJECT SERVICE - Favorites"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Favorite projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  favorites:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
              example:
                success: true
                status: 200
                favorites:
                  - id: 5
                    title: "React Native Mobile App"
                    description: "Build a cross-platform mobile application using React Native"
                    roleNeeded: "Mobile Developer"
                    status: "active"
                    priority: "medium"
                    budgetMin: 8000
                    budgetMax: 18000
                    currency: "USD"
                    isRemote: true
                    location: "Remote"
                    experienceLevel: "mid"
                    category: "Mobile Development"
                    skills: ["React Native", "JavaScript", "Redux"]
                    tags: ["mobile", "react-native", "javascript"]
                    applicantsCount: 15
                    ratingAvg: 4.6
                    createdAt: "2024-01-08T00:00:00Z"
                  - id: 12
                    title: "Node.js Backend API"
                    description: "Develop a robust REST API using Node.js and Express"
                    roleNeeded: "Backend Developer"
                    status: "active"
                    priority: "high"
                    budgetMin: 6000
                    budgetMax: 12000
                    currency: "USD"
                    isRemote: true
                    location: "Remote"
                    experienceLevel: "mid"
                    category: "Backend Development"
                    skills: ["Node.js", "Express", "MongoDB", "JWT"]
                    tags: ["backend", "nodejs", "api", "mongodb"]
                    applicantsCount: 22
                    ratingAvg: 4.4
                    createdAt: "2024-01-11T00:00:00Z"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  # 游댔 Project Saves (Bookmarks)
  /api/v1/projects/saves:
    post:
      summary: Save a project (bookmark)
      description: Add a project to user's saved list
      tags:
        - "游릭 PROJECT SERVICE - Saves"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteRequest"
            example:
              projectId: 123
      responses:
        "201":
          description: Project saved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  status:
                    type: integer
                  message:
                    type: string
                  save:
                    type: object
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

    delete:
      summary: Unsave a project (remove bookmark)
      description: Remove a project from user's saved list
      tags:
        - "游릭 PROJECT SERVICE - Saves"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FavoriteRequest"
            example:
              projectId: 123
      responses:
        "200":
          description: Project unsaved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  status:
                    type: integer
                  message:
                    type: string
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/saves/my:
    get:
      summary: Get user's saved projects
      description: Retrieve all projects saved by the authenticated user
      tags:
        - "游릭 PROJECT SERVICE - Saves"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Saved projects retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  status:
                    type: integer
                  saves:
                    type: array
                    items:
                      $ref: "#/components/schemas/Project"
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  # 游눫 Project Comments & Discussions (Public viewing, authenticated posting)
  /api/v1/projects/{projectId}/comments:
    get:
      summary: Get project comments
      description: Retrieve all comments and discussions for a specific project
      tags:
        - "游릭 PROJECT SERVICE - Comments"
      parameters:
        - name: projectId
          in: path
          required: true
          description: Project ID
          schema:
            type: integer
      responses:
        "200":
          description: Project comments retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  comments:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
              example:
                success: true
                status: 200
                comments:
                  - id: 1
                    projectId: 123
                    authorId: 456
                    authorName: "John Smith"
                    authorAvatar: "https://example.com/avatars/john.jpg"
                    content: "This project looks very interesting! I have 5+ years of experience with React and Node.js. Would love to discuss the requirements in detail."
                    parentCommentId: null
                    isEdited: false
                    likesCount: 3
                    repliesCount: 2
                    createdAt: "2024-01-15T10:30:00Z"
                    updatedAt: "2024-01-15T10:30:00Z"
                    replies:
                      - id: 2
                        projectId: 123
                        authorId: 789
                        authorName: "Project Owner"
                        authorAvatar: "https://example.com/avatars/owner.jpg"
                        content: "Thanks for your interest! Please check your email for the detailed requirements document."
                        parentCommentId: 1
                        isEdited: false
                        likesCount: 1
                        repliesCount: 0
                        createdAt: "2024-01-15T11:15:00Z"
                        updatedAt: "2024-01-15T11:15:00Z"
                        replies: []
                  - id: 3
                    projectId: 123
                    authorId: 101
                    authorName: "Sarah Johnson"
                    authorAvatar: "https://example.com/avatars/sarah.jpg"
                    content: "I've worked on similar e-commerce projects before. What's the expected timeline for this project?"
                    parentCommentId: null
                    isEdited: false
                    likesCount: 2
                    repliesCount: 1
                    createdAt: "2024-01-15T14:20:00Z"
                    updatedAt: "2024-01-15T14:20:00Z"
                    replies:
                      - id: 4
                        projectId: 123
                        authorId: 789
                        authorName: "Project Owner"
                        authorAvatar: "https://example.com/avatars/owner.jpg"
                        content: "We're looking at a 3-month timeline with weekly milestones. The project brief has all the details."
                        parentCommentId: 3
                        isEdited: false
                        likesCount: 0
                        repliesCount: 0
                        createdAt: "2024-01-15T15:45:00Z"
                        updatedAt: "2024-01-15T15:45:00Z"
                        replies: []
        "400":
          description: Bad request
        "404":
          description: Project not found
        "500":
          description: Internal server error

  /api/v1/projects/comments:
    post:
      summary: Add project comment
      description: Add a comment to a project discussion
      tags:
        - "游릭 PROJECT SERVICE - Comments"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
            example:
              projectId: 123
              content: "This project looks very interesting! I have 5+ years of experience with React and Node.js. Would love to discuss the requirements in detail."
              parentCommentId: null
      responses:
        "201":
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
              example:
                success: true
                status: 201
                message: "Comment added successfully"
                comment:
                  id: 5
                  projectId: 123
                  authorId: 456
                  authorName: "John Smith"
                  authorAvatar: "https://example.com/avatars/john.jpg"
                  content: "This project looks very interesting! I have 5+ years of experience with React and Node.js. Would love to discuss the requirements in detail."
                  parentCommentId: null
                  isEdited: false
                  likesCount: 0
                  repliesCount: 0
                  createdAt: "2024-01-15T16:45:00Z"
                  updatedAt: "2024-01-15T16:45:00Z"
                  replies: []
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/comments/{commentId}:
    put:
      summary: Update project comment
      description: Update an existing project comment (only by comment author)
      tags:
        - "游릭 PROJECT SERVICE - Comments"
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentUpdateRequest"
            example:
              content: "Updated comment: This project looks very interesting! I have 5+ years of experience with React and Node.js. Would love to discuss the requirements in detail."
      responses:
        "200":
          description: Comment updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
              example:
                success: true
                status: 200
                message: "Comment updated successfully"
                comment:
                  id: 5
                  projectId: 123
                  authorId: 456
                  authorName: "John Smith"
                  authorAvatar: "https://example.com/avatars/john.jpg"
                  content: "Updated comment: This project looks very interesting! I have 5+ years of experience with React and Node.js. Would love to discuss the requirements in detail."
                  parentCommentId: null
                  isEdited: true
                  likesCount: 2
                  repliesCount: 1
                  createdAt: "2024-01-15T16:45:00Z"
                  updatedAt: "2024-01-15T17:20:00Z"
                  replies: []
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - not comment author
        "404":
          description: Comment not found
        "500":
          description: Internal server error

    delete:
      summary: Delete project comment
      description: Delete a project comment (only by comment author)
      tags:
        - "游릭 PROJECT SERVICE - Comments"
      security:
        - bearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          description: Comment ID
          schema:
            type: integer
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Comment deleted successfully"
              example:
                success: true
                status: 200
                message: "Comment deleted successfully"
        "400":
          description: Bad request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - not comment author
        "404":
          description: Comment not found
        "500":
          description: Internal server error

  /api/v1/projects/owner/stats:
    get:
      summary: Get project owner statistics
      description: Get comprehensive statistics for the project owner's projects
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Statistics retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/owner/projects:
    get:
      summary: Get project owner's projects
      description: Retrieve all projects owned by the authenticated user
      tags:
        - "游릭 PROJECT SERVICE - Management"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Owner projects retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/owner/reviews:
    get:
      summary: Get project owner reviews
      description: Get reviews received by the project owner
      tags:
        - "游릭 PROJECT SERVICE - Reviews"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Reviews retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/owner/developers:
    get:
      summary: Get project owner's developers
      description: Get developers associated with the project owner's projects
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Developers retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/applications/my:
    get:
      summary: Get my applications
      description: Get all applications submitted by the authenticated developer
      tags:
        - "游릭 PROJECT SERVICE - Applications"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Applications retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/applications/my/count:
    get:
      summary: Get my applications count
      description: Get the count of applications submitted by the authenticated developer
      tags:
        - "游릭 PROJECT SERVICE - Applications"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Application count retrieved successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/projects/global/skills-tags:
    get:
      summary: Get global skills and tags
      description: Get all available skills and tags from the system
      tags:
        - "游릭 PROJECT SERVICE - Public Discovery"
      responses:
        "200":
          description: Skills and tags retrieved successfully

  /api/v1/projects/filter-options:
    get:
      summary: Get filter options
      description: Get all available filter options for projects (statuses, categories, etc.)
      tags:
        - "游릭 PROJECT SERVICE - Public Discovery"
      responses:
        "200":
          description: Filter options retrieved successfully

  /api/v1/projects/analytics/download:
    post:
      summary: Download applicants report
      description: Generate and download a PDF report of project applicants
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: integer
      responses:
        "200":
          description: Report generated successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - project owner only
        "500":
          description: Internal server error

  /api/v1/projects/export:
    post:
      summary: Export project data
      description: Export project applicants data as PDF
      tags:
        - "游릭 PROJECT SERVICE - Analytics"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                projectId:
                  type: integer
      responses:
        "200":
          description: Data exported successfully
        "401":
          description: Unauthorized
        "403":
          description: Forbidden - project owner only
        "500":
          description: Internal server error

  /api/v1/ai/description:
    post:
      summary: Generate AI project description
      description: Use AI to generate a project description based on provided data
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: AI description generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/ai/titles:
    post:
      summary: Generate AI project titles
      description: Use AI to generate suggested project titles
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: AI titles generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/ai/skills:
    post:
      summary: Generate AI skill suggestions
      description: Use AI to suggest relevant skills for a project
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: AI skills generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/ai/requirements:
    post:
      summary: Generate AI requirements
      description: Use AI to generate project requirements
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: AI requirements generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/ai/benefits:
    post:
      summary: Generate AI benefits
      description: Use AI to generate project benefits and perks
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: AI benefits generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/ai/budget:
    post:
      summary: Generate AI budget suggestions
      description: Use AI to suggest appropriate budget ranges
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: AI budget suggestions generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

  /api/v1/ai/comprehensive:
    post:
      summary: Generate comprehensive AI suggestions
      description: Use AI to generate comprehensive project suggestions (title, description, skills, requirements, benefits, budget)
      tags:
        - "游릭 PROJECT SERVICE - AI"
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Comprehensive AI suggestions generated successfully
        "401":
          description: Unauthorized
        "500":
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Project:
      type: object
      properties:
        id:
          type: integer
        ownerId:
          type: integer
        title:
          type: string
        description:
          type: string
        roleNeeded:
          type: string
        status:
          type: string
          enum: [draft, active, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        category:
          type: string
        experienceLevel:
          type: string
          enum: [entry, mid, senior, expert]
        budgetMin:
          type: number
        budgetMax:
          type: number
        currency:
          type: string
          default: USD
        isRemote:
          type: boolean
        location:
          type: string
        duration:
          type: string
        startDate:
          type: string
          format: date-time
        deadline:
          type: string
          format: date-time
        requirements:
          type: string
        benefits:
          type: string
        company:
          type: string
        website:
          type: string
        maxApplicants:
          type: integer
        language:
          type: string
        timezone:
          type: string
        skills:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ProjectCreate:
      type: object
      required: [title, description, roleNeeded]
      properties:
        title:
          type: string
          example: "E-commerce Website Development"
        description:
          type: string
          example: "Build a modern e-commerce platform with React and Node.js"
        roleNeeded:
          type: string
          example: "Full Stack Developer"
        status:
          type: string
          enum: [draft, active, completed, cancelled]
          default: draft
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
        category:
          type: string
          example: "Web Development"
        experienceLevel:
          type: string
          enum: [entry, mid, senior, expert]
          default: mid
        budgetMin:
          type: number
          example: 5000
        budgetMax:
          type: number
          example: 15000
        currency:
          type: string
          default: USD
        isRemote:
          type: boolean
          default: true
        location:
          type: string
          example: "Remote"
        duration:
          type: string
          example: "3 months"
        startDate:
          type: string
          format: date-time
          example: "2024-01-15T00:00:00Z"
        deadline:
          type: string
          format: date-time
          example: "2024-04-15T00:00:00Z"
        requirements:
          type: string
          example: "3+ years React experience, Node.js knowledge"
        benefits:
          type: string
          example: "Flexible hours, learning opportunities"
        company:
          type: string
          example: "TechCorp Inc."
        website:
          type: string
          example: "https://techcorp.com"
        maxApplicants:
          type: integer
          default: 10
        language:
          type: string
          default: English
        timezone:
          type: string
          example: "UTC-5"
        skills:
          type: array
          items:
            type: string
          example: ["React", "Node.js", "MongoDB"]
        tags:
          type: array
          items:
            type: string
          example: ["ecommerce", "react", "nodejs"]

    ProjectUpdate:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        roleNeeded:
          type: string
        status:
          type: string
          enum: [draft, active, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        category:
          type: string
        experienceLevel:
          type: string
          enum: [entry, mid, senior, expert]
        budgetMin:
          type: number
        budgetMax:
          type: number
        currency:
          type: string
        isRemote:
          type: boolean
        location:
          type: string
        duration:
          type: string
        startDate:
          type: string
          format: date-time
        deadline:
          type: string
          format: date-time
        requirements:
          type: string
        benefits:
          type: string
        company:
          type: string
        website:
          type: string
        maxApplicants:
          type: integer
        language:
          type: string
        timezone:
          type: string
        skills:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: string

    ProjectResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 200
        message:
          type: string
        project:
          $ref: "#/components/schemas/Project"

    ApplicationRequest:
      type: object
      required: [projectId]
      properties:
        projectId:
          type: integer
          example: 1
        matchScore:
          type: number
          example: 85.5
        notes:
          type: string
          example: "I have 5 years of React experience and have built similar e-commerce platforms"

    ApplicationResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Applied successfully"
        application:
          $ref: "#/components/schemas/Application"

    Application:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        userId:
          type: integer
        matchScore:
          type: number
        notes:
          type: string
        status:
          type: string
          enum: [pending, accepted, rejected]
        appliedAt:
          type: string
          format: date-time

    ApplicantStatusUpdate:
      type: object
      required: [projectId, userId, status]
      properties:
        projectId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 123
        status:
          type: string
          enum: [pending, accepted, rejected]
          example: accepted

    Applicant:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        name:
          type: string
        email:
          type: string
        matchScore:
          type: number
        notes:
          type: string
        status:
          type: string
          enum: [pending, accepted, rejected]
        appliedAt:
          type: string
          format: date-time

    InviteRequest:
      type: object
      required: [projectId, invitedEmail]
      properties:
        projectId:
          type: integer
          example: 1
        invitedEmail:
          type: string
          format: email
          example: "developer@example.com"
        invitedUserId:
          type: integer
          example: 456
        role:
          type: string
          example: "Frontend Developer"
        message:
          type: string
          example: "We'd love to have you join our project!"

    InviteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Invite created"
        invite:
          $ref: "#/components/schemas/Invite"

    Invite:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        invitedEmail:
          type: string
        invitedUserId:
          type: integer
        role:
          type: string
        message:
          type: string
        status:
          type: string
          enum: [pending, accepted, declined]
        createdAt:
          type: string
          format: date-time

    InviteResponseRequest:
      type: object
      required: [inviteId, status]
      properties:
        inviteId:
          type: integer
          example: 1
        status:
          type: string
          enum: [accepted, declined]
          example: accepted

    FileRequest:
      type: object
      required: [projectId, name, url]
      properties:
        projectId:
          type: integer
          example: 1
        name:
          type: string
          example: "project-requirements.pdf"
        url:
          type: string
          example: "https://storage.example.com/files/requirements.pdf"
        mimeType:
          type: string
          example: "application/pdf"
        sizeKb:
          type: number
          example: 1024

    FileResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "File uploaded successfully"
        file:
          $ref: "#/components/schemas/File"

    File:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        uploaderId:
          type: integer
        name:
          type: string
        url:
          type: string
          description: "Supabase storage path"
          example: "project-files/1234567890_abc123.pdf"
        mimeType:
          type: string
        sizeKb:
          type: number
        description:
          type: string
        category:
          type: string
          enum: ["requirements", "design", "documentation", "code", "other"]
        uploadedAt:
          type: string
          format: date-time
        signedUrl:
          type: string
          description: "Temporary signed URL for accessing the file (1 hour expiry)"

    UpdateRequest:
      type: object
      required: [projectId, message]
      properties:
        projectId:
          type: integer
          example: 1
        type:
          type: string
          enum: [progress, milestone, issue, announcement]
          default: progress
        message:
          type: string
          example: "Completed the user authentication module"

    UpdateResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Update added"
        update:
          $ref: "#/components/schemas/Update"

    Update:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        authorId:
          type: integer
        type:
          type: string
          enum: [progress, milestone, issue, announcement]
        message:
          type: string
        createdAt:
          type: string
          format: date-time

    ReviewRequest:
      type: object
      required: [projectId, rating]
      properties:
        projectId:
          type: integer
          example: 1
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 4
        comment:
          type: string
          example: "Great project, excellent communication throughout"

    ReviewResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Review added"
        review:
          $ref: "#/components/schemas/Review"

    Review:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        reviewerId:
          type: integer
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdAt:
          type: string
          format: date-time

    BoostRequest:
      type: object
      required: [projectId, plan, amountCents, startAt, endAt]
      properties:
        projectId:
          type: integer
          example: 1
        plan:
          type: string
          enum: [basic, premium, featured]
          example: premium
        amountCents:
          type: integer
          example: 5000
        currency:
          type: string
          default: USD
        startAt:
          type: string
          format: date-time
          example: "2024-01-15T00:00:00Z"
        endAt:
          type: string
          format: date-time
          example: "2024-02-15T00:00:00Z"

    BoostResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Boost added"
        boost:
          $ref: "#/components/schemas/Boost"

    Boost:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        purchasedBy:
          type: integer
        plan:
          type: string
          enum: [basic, premium, featured]
        amountCents:
          type: integer
        currency:
          type: string
        startAt:
          type: string
          format: date-time
        endAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time

    # New schemas for additional endpoints
    ProjectStats:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 200
        stats:
          type: object
          properties:
            projectId:
              type: integer
              example: 1
            totalViews:
              type: integer
              example: 150
            totalApplications:
              type: integer
              example: 25
            totalFavorites:
              type: integer
              example: 8
            averageRating:
              type: number
              example: 4.5
            totalReviews:
              type: integer
              example: 12
            totalUpdates:
              type: integer
              example: 5
            totalBoosts:
              type: integer
              example: 2
            totalComments:
              type: integer
              example: 15
            completionRate:
              type: number
              example: 85.5
            responseTime:
              type: string
              example: "2.3 hours"
            lastActivity:
              type: string
              format: date-time
              example: "2024-01-15T10:30:00Z"

    FavoriteRequest:
      type: object
      required: [projectId]
      properties:
        projectId:
          type: integer
          example: 1

    FavoriteResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Project added to favorites"
        favorite:
          type: object
          properties:
            id:
              type: integer
            userId:
              type: integer
            projectId:
              type: integer
            createdAt:
              type: string
              format: date-time

    CommentRequest:
      type: object
      required: [projectId, content]
      properties:
        projectId:
          type: integer
          example: 1
        content:
          type: string
          example: "This project looks interesting! I have experience with React and Node.js."
        parentCommentId:
          type: integer
          description: "ID of parent comment for replies"
          example: 5

    CommentUpdateRequest:
      type: object
      required: [content]
      properties:
        content:
          type: string
          example: "Updated comment content"

    CommentResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        status:
          type: integer
          example: 201
        message:
          type: string
          example: "Comment added successfully"
        comment:
          $ref: "#/components/schemas/Comment"

    Comment:
      type: object
      properties:
        id:
          type: integer
        projectId:
          type: integer
        authorId:
          type: integer
        authorName:
          type: string
          example: "John Doe"
        authorAvatar:
          type: string
          example: "https://example.com/avatar.jpg"
        content:
          type: string
        parentCommentId:
          type: integer
          description: "ID of parent comment for replies"
        isEdited:
          type: boolean
          example: false
        likesCount:
          type: integer
          example: 3
        repliesCount:
          type: integer
          example: 2
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        replies:
          type: array
          items:
            $ref: "#/components/schemas/Comment"
