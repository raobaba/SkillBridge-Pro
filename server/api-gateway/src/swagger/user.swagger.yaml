openapi: 3.0.0
info:
  title: User Service API
  description: API for user registration, login, profile management, password reset, email verification, and OAuth updates
  version: 1.0.0

servers:
  - url: http://localhost:3001
    description: Local User Server

paths:
  /api/v1/user/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Rajan Kumar
                email:
                  type: string
                  format: email
                  example: raorajan9576@gmail.com
                role:
                  type: string
                  enum: [developer, project-owner, admin]
                  default: developer # ðŸ‘ˆ default role
                  example: developer
                domains:
                  type: string
                  example: "web, ai-ml"
                experience:
                  type: string
                  example: "3 years"
                availability:
                  type: string
                  enum: [full-time, part-time, freelance]
                  default: full-time
                  example: full-time
                password:
                  type: string
                  format: password
                  example: rajan@123
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Bad request

  /api/v1/user/login:
    post:
      summary: Login a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [email, password, role]
              properties:
                email:
                  type: string
                  format: email
                  example: raorajan9576@gmail.com
                role:
                  type: string
                  enum: [developer, project-owner, admin]
                  default: developer # ðŸ‘ˆ default role
                  example: developer
                password:
                  type: string
                  example: rajan@123
      responses:
        "200":
          description: Login successful
        "401":
          description: Invalid credentials

  /api/v1/user/profile:
    get:
      summary: Get user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User profile returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error

    put:
      summary: Update user profile
      description: Update editable profile fields (does not allow email, password, ID, or system fields)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdate"
      responses:
        "200":
          description: Profile updated successfully
        "400":
          description: Invalid request data
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error

    delete:
      summary: Delete user profile
      security:
        - bearerAuth: []
      responses:
        "200":
          description: User deleted successfully
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Internal server error

  /api/v1/user/verify-email:
    get:
      summary: Verify email using token
      parameters:
        - name: token
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Email verified
        "400":
          description: Invalid or expired token

  /api/v1/user/verify-email/{id}:
    get:
      summary: Verify email using user ID (fallback)
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Email verified
        "404":
          description: User not found

  /api/v1/user/forgot-password:
    post:
      summary: Send password reset email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [email]
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Reset email sent
        "404":
          description: User not found

  /api/v1/user/reset-password/{token}:
    put:
      summary: Reset password using token
      parameters:
        - name: token
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [newPassword]
              properties:
                newPassword:
                  type: string
      responses:
        "200":
          description: Password reset successful
        "400":
          description: Invalid or expired token

  /api/v1/user/change-password:
    put:
      summary: Change password (logged-in user)
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [currentPassword, newPassword]
              properties:
                currentPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password changed
        "401":
          description: Invalid current password

  /api/v1/user/oauth:
    put:
      summary: Update OAuth details
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              required: [oauthProvider, oauthId]
              properties:
                oauthProvider:
                  type: string
                oauthId:
                  type: string
      responses:
        "200":
          description: OAuth details updated

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        uuid:
          type: string
        name:
          type: string
        email:
          type: string
        bio:
          type: string
        avatarUrl:
          type: string
        domainPreferences:
          type: string
        skills:
          type: object
        experience:
          type: string
        location:
          type: string
        availability:
          type: string
        resumeUrl:
          type: string
        xp:
          type: integer
        badges:
          type: array
          items:
            type: string
        level:
          type: integer
        githubUrl:
          type: string
        linkedinUrl:
          type: string
        stackoverflowUrl:
          type: string
        portfolioScore:
          type: integer
        isEmailVerified:
          type: boolean
        notificationPrefs:
          type: object
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserUpdate:
      type: object
      properties:
        name:
          type: string
          example: Rajan Kumar
        bio:
          type: string
          example: Full Stack Developer
        avatarUrl:
          type: string
          example: https://example.com/avatar.png
        domainPreferences:
          type: string
          example: web, ai-ml
        skills:
          type: object
          example: {"javascript": "advanced", "react": "intermediate"}
        experience:
          type: string
          example: 3 years
        location:
          type: string
          example: Nagpur, Maharashtra
        availability:
          type: string
          example: full-time
        resumeUrl:
          type: string
          example: https://example.com/resume.pdf
        xp:
          type: integer
          example: 0
        badges:
          type: array
          items:
            type: string
          example: ["Top Performer"]
        level:
          type: integer
          example: 1
        githubUrl:
          type: string
          example: https://github.com/raobaba
        linkedinUrl:
          type: string
          example: https://www.linkedin.com/in/kumar-rajan
        stackoverflowUrl:
          type: string
          example: https://stackoverflow.com/users/123456
        portfolioScore:
          type: integer
          example: 0
        notificationPrefs:
          type: object
          example: {"email": true, "sms": false}
      required: []
